# Deploy FastAPI App with PostgreSQL
#
# Required GitHub Secrets:
# - SSH_PRIVATE_KEY: SSH private key for server access
# - POSTGRES_USER: PostgreSQL username (e.g., kevinlin192003)
# - POSTGRES_PASSWORD: PostgreSQL password 
# - POSTGRES_DB: PostgreSQL database name (default: fastapi_app if not specified)
#
name: Deploy FastAPI App

on:
  push:
    branches:
      - main # Change if deploying a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check Python version
        run: python --version

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to DigitalOcean
        env:
          HOST: 159.89.245.206 # Update with your server IP
          USERNAME: kevinlin192003  # Or another user with sudo privileges
          TARGET_DIR: /var/www/fastapi-app
          APP_NAME: fastapi-app
          PORT: 8000

        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
            set -e
            echo "Creating project directory if needed..."
            mkdir -p $TARGET_DIR
            echo "Navigating to project directory..."
            cd $TARGET_DIR

            echo "Fetching and resetting to latest GitHub commit..."
            git fetch origin
            git reset --hard origin/main

            echo "Creating/updating virtual environment..."
            if [ ! -d "venv" ]; then
              echo "Creating new virtual environment..."
              python3 -m venv venv
            fi
            
            echo "Activating virtual environment..."
            source venv/bin/activate
            
            echo "Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "Creating production .env file..."
            # Use separate echo statements for better YAML compatibility
            echo "# Application settings" > "$TARGET_DIR/.env"
            echo "PROJECT_NAME=FastAPI Boilerplate" >> "$TARGET_DIR/.env"
            echo "VERSION=0.1.0" >> "$TARGET_DIR/.env"
            echo "DESCRIPTION=FastAPI Boilerplate with SQLAlchemy, JWT Auth, and Alembic" >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# API settings" >> "$TARGET_DIR/.env"
            echo "API_V1_STR=" >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# Security - Using a long secure random string" >> "$TARGET_DIR/.env"
            echo "SECRET_KEY=A38Lhs17o53sUebdKS1UHZn9U4edKsTHYE7QHrE5JSX4DuC6g72plG9q2TuMspL8" >> "$TARGET_DIR/.env"
            echo "ALGORITHM=HS256" >> "$TARGET_DIR/.env"
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=10080" >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# CORS origins - Default production settings" >> "$TARGET_DIR/.env"
            echo 'BACKEND_CORS_ORIGINS=["https://myapp.com","http://localhost:3000"]' >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# Database configuration - Using production database settings" >> "$TARGET_DIR/.env"
            # URL encode any special characters in the password using Python
            ENCODED_PW=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${{ secrets.POSTGRES_PASSWORD }}'))")
            echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${ENCODED_PW}@localhost:5432/${{ secrets.POSTGRES_DB || 'fastapi_app' }}" >> "$TARGET_DIR/.env"

            echo "Setting proper Python path..."
            export PYTHONPATH=$TARGET_DIR:$PYTHONPATH
            
            echo "Ensuring database tables exist..."
            python -c "from app.db.base import Base; from app.db.session import engine; Base.metadata.create_all(bind=engine)"
            
            echo "Initializing database with initial data..."
            python -m app.utils.init_db
            
            # Create alembic table to prevent migration errors
            python -c "import sqlalchemy as sa; from app.db.session import engine; conn=engine.connect(); conn.execute(sa.text('CREATE TABLE IF NOT EXISTS alembic_version (version_num VARCHAR(32) NOT NULL, CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num))'));"
            
            echo "Using existing PostgreSQL configuration with user 'kevinlin192003'"
            
            echo "Running any pending migrations..."
            alembic upgrade head

            echo "Checking if PM2 is installed..."
            if ! command -v pm2 &> /dev/null
            then
              echo "PM2 not found, installing..."
              sudo npm install -g pm2
            else
              echo "PM2 is already installed"
            fi
            
            # Ensure proper permissions on directories
            chmod 755 $TARGET_DIR

            echo "Creating PM2 startup script..."
            # Use separate echo statements for better YAML compatibility
            echo '#!/bin/bash' > "$TARGET_DIR/start.sh"
            echo "source \"$TARGET_DIR/venv/bin/activate\"" >> "$TARGET_DIR/start.sh"
            echo "cd \"$TARGET_DIR\"" >> "$TARGET_DIR/start.sh"
            echo "exec uvicorn main:app --host 0.0.0.0 --port $PORT" >> "$TARGET_DIR/start.sh"
            
            chmod +x $TARGET_DIR/start.sh
            
            echo "Checking if PM2 process exists..."
            if pm2 list | grep -q $APP_NAME; then
              echo "Restarting application: $APP_NAME"
              pm2 restart $APP_NAME
            else
              echo "Starting application: $APP_NAME"
              pm2 start $TARGET_DIR/start.sh --name $APP_NAME
            fi

            echo "Saving PM2 state..."
            pm2 save
          EOF
