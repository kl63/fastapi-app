name: Deploy FastAPI App

on:
  push:
    branches:
      - main  # Change if deploying a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check Python version
        run: python --version

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to DigitalOcean
        env:
          HOST: 159.89.245.206
          USERNAME: root
          TARGET_DIR: /var/www/fastapi_app
          APP_NAME: fastapi_app
          PORT: 8000

          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << 'EOF'
            set -e
            echo "Navigating to project directory..."
            cd $TARGET_DIR

            echo "Fetching and resetting to latest GitHub commit..."
            git fetch origin
            git reset --hard origin/main

            echo "Setting up Python virtual environment..."
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            echo "Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "Writing environment variables to .env file..."
            cat > .env << EOL
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_DB=${POSTGRES_DB}
POSTGRES_HOST=${POSTGRES_HOST}
POSTGRES_PORT=${POSTGRES_PORT}
EOL

            echo "Running database migrations..."
            if [ -d "alembic" ]; then
              alembic upgrade head
            else
              echo "No Alembic folder found â€” skipping migrations."
            fi

            echo "Checking if PM2 is installed..."
            if ! command -v pm2 &> /dev/null; then
              echo "PM2 not found, installing..."
              npm install -g pm2
            else
              echo "PM2 is already installed"
            fi

            echo "Starting or restarting FastAPI app with PM2..."
            if pm2 list | grep -q $APP_NAME; then
              pm2 restart $APP_NAME
            else
              pm2 start venv/bin/uvicorn --name $APP_NAME -- \
                main:app --host 0.0.0.0 --port=$PORT
            fi

            pm2 save
          EOF



