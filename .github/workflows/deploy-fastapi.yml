name: Deploy FastAPI App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check Python version
        run: python --version

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to DigitalOcean server
        env:
          HOST: 159.89.245.206
          USERNAME: kevinlin192003
          TARGET_DIR: /var/www/fastapi-app
          APP_NAME: fastapi-app
          PORT: 8000
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'fastapi_app' }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << 'ENDSSH'
            set -e
            cd $TARGET_DIR || mkdir -p $TARGET_DIR && cd $TARGET_DIR

            echo "Fetching latest code..."
            git fetch origin
            git reset --hard origin/main

            echo "Creating/updating virtual environment..."
            [ ! -d "venv" ] && python3 -m venv venv
            source venv/bin/activate

            echo "Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt --break-system-packages

            echo "Encoding DB password..."
            ENCODED_PW=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${POSTGRES_PASSWORD}'))")
            DB_URL="postgresql://${POSTGRES_USER}:${ENCODED_PW}@127.0.0.1:5432/${POSTGRES_DB}"

            echo "Creating .env file..."
            cat > .env << EOF
DATABASE_URL=$DB_URL
SECRET_KEY=$(openssl rand -hex 32)
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
PROJECT_NAME=FastAPI API
API_V1_STR=/api/v1
VERSION=0.1.0
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8000"]
EOF

            chmod 600 .env

            echo "Testing database connection..."
            python -c "import psycopg2, os; print('Connecting...'); psycopg2.connect(os.environ['DATABASE_URL']); print('DB connection successful!')" || (echo "DB connection failed!" && exit 1)

            echo "Running migrations..."
            alembic upgrade head || echo "Alembic migration failed, check later."

            echo "Setting up PM2..."
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi

            echo "Creating start script..."
            cat > start.sh << EOF
#!/bin/bash
source venv/bin/activate
set -a
source .env
set +a
exec uvicorn main:app --host 0.0.0.0 --port $PORT
EOF

            chmod +x start.sh

            echo "Creating ecosystem config..."
            cat > ecosystem.config.js << EOF
module.exports = {
  apps: [{
    name: "$APP_NAME",
    script: "$TARGET_DIR/start.sh",
    cwd: "$TARGET_DIR",
    interpreter: "/bin/bash"
  }]
}
EOF

            echo "Starting app with PM2..."
            if pm2 list | grep -q "$APP_NAME"; then
              pm2 restart $APP_NAME
            else
              pm2 start ecosystem.config.js
            fi

            pm2 save
          ENDSSH
