name: Deploy FastAPI App

on:
  push:
    branches:
      - main  # Only run on main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to DigitalOcean
        env:
          HOST: 159.89.245.206
          USERNAME: kevinlin192003
          TARGET_DIR: /var/www/fastapi-app
          APP_NAME: fastapi-app
          PORT: 8000

          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "
            set -e

            echo '🚀 Starting deployment on server...'

            # Create directory if missing
            mkdir -p $TARGET_DIR
            cd $TARGET_DIR

            # If repo not cloned yet, clone it
            if [ ! -d '.git' ]; then
              echo 'Cloning repository for the first time...'
              git clone https://github.com/kl63/fastapi-app.git .
            fi

            echo 'Fetching latest code...'
            git fetch origin
            git reset --hard origin/main

            echo 'Setting up Python virtual environment...'
            if [ ! -d 'venv' ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            echo 'Installing dependencies...'
            pip install --upgrade pip
            pip install -r requirements.txt

            echo 'Writing environment variables to .env file...'
            echo "POSTGRES_USER=$POSTGRES_USER" > .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
            echo "POSTGRES_DB=$POSTGRES_DB" >> .env
            echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
            echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
            # Create DATABASE_URL with proper escaping for special characters
            # First, double escape the password for both shell and Python
            ESCAPED_PW=$(python3 -c "import urllib.parse; print(urllib.parse.quote_plus('$POSTGRES_PASSWORD'))")
            # Then construct the full URL
            echo "DATABASE_URL=postgresql://$POSTGRES_USER:$ESCAPED_PW@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB" >> .env
            echo "SECRET_KEY=supersecretkey" >> .env

            echo 'Running database migrations...'
            if [ -d 'alembic' ]; then
              # Try Alembic migrations, but don't fail if they error
              alembic upgrade head || {
                echo '⚠️ Alembic migrations failed, using fallback database initialization.'
                # Create __init__.py files to ensure proper imports
                touch app/__init__.py
                touch app/db/__init__.py
                # Run our fallback database initialization script
                python3 -m app.db.init_db
              }
            else
              echo '⚠️ No Alembic folder found — using fallback database initialization.'
              # Create __init__.py files to ensure proper imports
              touch app/__init__.py
              touch app/db/__init__.py
              # Run our fallback database initialization script
              python3 -m app.db.init_db
            fi

            echo 'Ensuring PM2 is installed...'
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            echo 'Starting or restarting FastAPI app with PM2...'
            if pm2 list | grep -q $APP_NAME; then
              pm2 restart $APP_NAME
            else
              pm2 start venv/bin/uvicorn --name $APP_NAME -- \
                main:app --host 0.0.0.0 --port=$PORT
            fi

            pm2 save
            echo '✅ Deployment complete!'
          "
