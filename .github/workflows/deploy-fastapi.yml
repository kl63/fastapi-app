# Deploy FastAPI App with PostgreSQL
#
# Required GitHub Secrets:
# - SSH_PRIVATE_KEY: SSH private key for server access
# - POSTGRES_USER: PostgreSQL username (e.g., kevinlin192003)
# - POSTGRES_PASSWORD: PostgreSQL password 
# - POSTGRES_DB: PostgreSQL database name (default: fastapi_app if not specified)
#
name: Deploy FastAPI App

on:
  push:
    branches:
      - main # Change if deploying a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check Python version
        run: python --version

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to DigitalOcean
        env:
          HOST: 159.89.245.206 # Update with your server IP
          USERNAME: kevinlin192003  # Or another user with sudo privileges
          TARGET_DIR: /var/www/fastapi-app
          APP_NAME: fastapi-app
          PORT: 8000

        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
            set -e
            echo "Creating project directory if needed..."
            mkdir -p $TARGET_DIR
            echo "Navigating to project directory..."
            cd $TARGET_DIR

            echo "Fetching and resetting to latest GitHub commit..."
            git fetch origin
            git reset --hard origin/main

            echo "Creating/updating virtual environment..."
            if [ ! -d "venv" ]; then
              echo "Creating new virtual environment..."
              python3 -m venv venv
            fi
            
            echo "Activating virtual environment..."
            source venv/bin/activate
            
            echo "Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "Creating production .env file..."
            # Use separate echo statements for better YAML compatibility
            echo "# Application settings" > "$TARGET_DIR/.env"
            echo "PROJECT_NAME=FastAPI Boilerplate" >> "$TARGET_DIR/.env"
            echo "VERSION=0.1.0" >> "$TARGET_DIR/.env"
            echo "DESCRIPTION=FastAPI Boilerplate with SQLAlchemy, JWT Auth, and Alembic" >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# API settings" >> "$TARGET_DIR/.env"
            echo "API_V1_STR=" >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# Security - Using a long secure random string" >> "$TARGET_DIR/.env"
            echo "SECRET_KEY=A38Lhs17o53sUebdKS1UHZn9U4edKsTHYE7QHrE5JSX4DuC6g72plG9q2TuMspL8" >> "$TARGET_DIR/.env"
            echo "ALGORITHM=HS256" >> "$TARGET_DIR/.env"
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=10080" >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# CORS origins - Default production settings" >> "$TARGET_DIR/.env"
            echo 'BACKEND_CORS_ORIGINS=["https://myapp.com","http://localhost:3000"]' >> "$TARGET_DIR/.env"
            echo "" >> "$TARGET_DIR/.env"
            echo "# Database configuration - Using production database settings" >> "$TARGET_DIR/.env"
            # URL encode any special characters in the password using Python
            echo "Setting up database connection..."
            
            # Create database connection and export to environment
            if [ -n "${{ secrets.POSTGRES_PASSWORD }}" ]; then
              ENCODED_PW=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${{ secrets.POSTGRES_PASSWORD }}'))")
              DB_NAME="${{ secrets.POSTGRES_DB || 'fastapi_app' }}"
              DB_USER="${{ secrets.POSTGRES_USER }}"
              DB_URL="postgresql://${DB_USER}:${ENCODED_PW}@localhost:5432/${DB_NAME}"
              
              # Skip database creation on the server - we'll use the app's built-in initialization
              # Just ensure the DATABASE_URL is correctly set
              echo "Skipping database creation - will be handled by application"
              
              # Check if PostgreSQL is running
              echo "Checking PostgreSQL service status..."
              systemctl status postgresql || echo "PostgreSQL service check failed but continuing..."
              
              # Create a temporary direct access script to test connection
              cat > test_db.py << 'EOF'
              import os
              import sys
              import psycopg2
              
              # Get the database URL from arguments
              db_url = sys.argv[1] if len(sys.argv) > 1 else os.environ.get('DATABASE_URL')
              print(f"Testing connection to: {db_url}")
              
              try:
                  conn = psycopg2.connect(db_url)
                  cursor = conn.cursor()
                  cursor.execute("SELECT 1")
                  print("Connection successful!")
                  cursor.close()
                  conn.close()
              except Exception as e:
                  print(f"Connection error: {str(e)}")
                  # Don't fail - we'll let the app handle this
              EOF
              
              # Run the database test script
              echo "Testing database connection..."
              python test_db.py "${DB_URL}" || echo "Database connection test failed, but continuing..."
              
              # Write DATABASE_URL to .env file
              echo "DATABASE_URL=${DB_URL}" >> "$TARGET_DIR/.env"
              
              # Export to current shell environment
              export DATABASE_URL="${DB_URL}"
              echo "Database URL created and exported to environment: ${DB_URL}"
              
              # Debug check with better error handling
              echo "Testing PostgreSQL connection..."
              python3 -c "import psycopg2; import os; print('DATABASE_URL =', os.environ.get('DATABASE_URL')); conn = psycopg2.connect('${DB_URL}'); print('Connection successful!')" || echo "Connection failed, but continuing..."
            else
              echo "ERROR: Required GitHub secrets not set. Please add POSTGRES_USER and POSTGRES_PASSWORD secrets."
              exit 1
            fi

            echo "Setting proper Python path..."
            export PYTHONPATH="$TARGET_DIR:$PYTHONPATH"
            cd "$TARGET_DIR"
            
            echo "Creating debug script for database operations..."
            cat > debug_db.py << 'EOF'
            import os
            import sys
            print(f"Python version: {sys.version}")
            print(f"PYTHONPATH: {os.environ.get('PYTHONPATH')}")
            print(f"Current directory: {os.getcwd()}")
            print(f"DATABASE_URL: {os.environ.get('DATABASE_URL')}")
            
            try:
                from app.db.base import Base
                from app.db.session import engine
                print("Successfully imported database modules")
                print(f"Engine URL: {engine.url}")
                Base.metadata.create_all(bind=engine)
                print("Successfully created database tables")
            except Exception as e:
                print(f"Error creating database tables: {str(e)}")
            EOF
            
            echo "Setting up database tables with better error handling..."
            python debug_db.py
            
            echo "Initializing database with initial data..."
            python -m app.utils.init_db || echo "Error initializing database data, but continuing deployment"
            
            # Create alembic table to prevent migration errors
            python -c "import sqlalchemy as sa; from app.db.session import engine; conn=engine.connect(); conn.execute(sa.text('CREATE TABLE IF NOT EXISTS alembic_version (version_num VARCHAR(32) NOT NULL, CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num))'));"
            
            echo "Using existing PostgreSQL configuration with user 'kevinlin192003'"
            
            echo "Running any pending migrations..."
            alembic upgrade head

            echo "Checking if PM2 is installed..."
            if ! command -v pm2 &> /dev/null
            then
              echo "PM2 not found, installing..."
              sudo npm install -g pm2
            else
              echo "PM2 is already installed"
            fi
            
            # Ensure proper permissions on directories
            chmod 755 $TARGET_DIR

            echo "Creating PM2 startup script..."
            # Use separate echo statements for better YAML compatibility
            echo '#!/bin/bash' > "$TARGET_DIR/start.sh"
            echo "source \"$TARGET_DIR/venv/bin/activate\"" >> "$TARGET_DIR/start.sh"
            echo "cd \"$TARGET_DIR\"" >> "$TARGET_DIR/start.sh"
            echo "exec uvicorn main:app --host 0.0.0.0 --port $PORT" >> "$TARGET_DIR/start.sh"
            
            chmod +x $TARGET_DIR/start.sh
            
            echo "Checking if PM2 process exists..."
            if pm2 list | grep -q $APP_NAME; then
              echo "Restarting application: $APP_NAME"
              pm2 restart $APP_NAME
            else
              echo "Starting application: $APP_NAME"
              pm2 start $TARGET_DIR/start.sh --name $APP_NAME
            fi

            echo "Saving PM2 state..."
            pm2 save
          EOF
